# -*- coding: utf-8 -*-
"""19thFeb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZTVdScxnphDC5y4CBFJfxqAvIDIzytQY

#Set Exercises
"""

#finding MAX and Minimum in set
def Max(set1):
    return (max(set1))
def Min(set1):
    return (min(set1))

def main():
    set1={1,2,3,4,5}
    set2={2,5,6,7}
    print(Max(set1))
    print(Min(set1))


if __name__=="__main__":
    main()

#insertion/deletion operations
s={1,2}
s.add(3)
s.remove(2)
s.discard(2)
print(s.pop())
s.clear()

#Check if two lists have at-least one element common
a = [1, 2, 3, 4]
b = [5, 6, 3, 8]
common=set(a)&set(b)

if common:
    print(common)
else:
    print("None")

#Set update() in Python to do union of n arrays
# Function to combine n arrays

def unionn(input):
	res = set(input[0])
	for array in input[1:]:
		res.update(array)

	return list(res)

def main():
  s = [[1, 2, 2, 4, 3, 6],[5, 1, 3, 4],[4,7,9,10,29]]
  print(unionn(s))




if __name__ == "__main__":
	main()

#intersection of list & difference & symmetric difference
a=map(int,input().split())
b=map(int,input().split())
res=set(a)&set(b)
print(res)
res1=set(a)-set(b)
print(res1)
res2=set(a)^set(b)
print(res2)

"""
#Tuple Excercises


"""

#find tuples which have all elements divisible by K from a list of tuples
test_list = [(6,12,2), (60, 12, 6), (12, 18, 21)]
k = 6
res=[]
for i in test_list:
    c=0
    for j in i:
        if(j%k==0):
            c+=1
    if(c==len(i)):
        res.append(i)
print(res)

#Sort a List of Tuples by Second Item
scores= [("x",100),("y",90),("z",60),("a",70),("b",80)]

sorted_by_score = sorted(scores, key=lambda x: x[1])
print(scores)
print("\n sorted by the (score):")
print(sorted_by_score[::-1])

#Extract tuples having 2 digit elements
test_list = [(54, 2), (34, 55), (222, 23), (12, 45), (78,12),(9,11),(333,100)]
k=2
res=[]
for i in test_list:
    c=0
    for j in i:
      if(100-j<=90 and 100-j>=10):
        c+=1
      if(c==len(i)):
        res.append(i)
print(res)

# Extract Symmetric Tuples

test_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]

print(test_list)
temp_set = set()
res = []
for i in test_list:
	if i in temp_set or (i[1], i[0]) in temp_set:
		res.append(i)
	else:
		temp_set.add(i)
print("The Symmetric tuples : " + str(res))

# Sort Tuples by Maximum element

def get_max(sub):
	return max(sub)
test_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]
print((test_list))
test_list.sort(key = get_max, reverse = True)
print("Sorted Tuples : " + str(test_list))

# Sort lists in tuple
tuple_list = ([3, 1, 2], [9, 7, 8], [5, 4, 6])
print(tuple_list)

sorted_lists = []
for i in tuple_list:
    sl = sorted(i)
    sorted_lists.append(sl)

print(tuple(sorted_lists))

"""# Dictionary Exercises"""

#merging Dictionaries
d1 = {'x': 1, 'y': 2}
d2 = {'y': 3, 'z': 4}
d1.update(d2)
print(d1)
d1 = {'x': 1, 'y': 2}
d2 = {'y': 3, 'z': 4}
d3 = d1 | d2
print(d3)

#Remove Dictionary Key Words
d = {'a': 1, 'b': 2,'c':3,'d':4,'e':5}
del d['a']
print(d)
d.pop('b')
print(d)
d.popitem()
print(d)

#calculate mean of dict values

dict = {"a" : 12, "b" : 9, "c" : 15, "d" : 18, "e" : 10}
print(dict)
res = 0
for val in dict.values():
	res += val
res = res / len(dict)

print(res)

#Sort Python Dictionary by Key and Value
my_dict = {'banana': 3, 'apple': 5, 'cherry': 2, 'date': 4}
print(my_dict)
items_by_key = sorted(my_dict.items())
sorted_by_key = dict(items_by_key)
print(sorted_by_key)
items_by_value = sorted(my_dict.items(), key=lambda item: item[1])
sorted_by_value = dict(items_by_value)
print(sorted_by_value)

#Find sum of all items in a Dictionary


dict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}
sum = 0
for i in dict.values():
		sum = sum + i
print(sum)

# insertion of items in beginning of ordered dict
from collections import OrderedDict

dict = OrderedDict([('a','1'), ('b', '2')])
dict.update({'c': '3'})
dict.move_to_end('c', last=False)

print(dict)

# Dictionary and counter in Python to find winner of election

votes = ["a","b","c","a","a","b","c","c","c","b","a","a","a","b","b","c","b","b","b","c","c","c","b","c","a","a","b","c","d","c","b","b"]
count = {}
for i in votes:
    if i in count:
        count[i] += 1
    else:
        count[i] = 1


print(count)
winner = max(count, key=count.get)
print(winner)

#find all duplicate characters in a string
s = "qwertyuertyuipokjbvcxswertyuikmnbvfcx"
d = {}
res = []

for i in s:
    d[i] = d.get(i, 0) + 1
for c, cnt in d.items():
    if cnt > 1:
        res.append(c)

print(res)




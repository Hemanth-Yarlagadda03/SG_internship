# -*- coding: utf-8 -*-
"""20thFeb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iwp8LwtYaK8m4S4PpYbVXwZcyTceI-Mn

#LIST EXERCISES


*OOPS Exercises are preceded by some list and array exercises*
"""

#find number of unique elements in list
a=map(int,input().split())
b=set(a)
print(len(b))

# find product of elements in a list excluding duplicates
a=map(int,input().split())
b=set(a)
res=1
for i in b:
  res*=i
print(res)

# Extract Elements withb frequency greater than k
a=map(int,input().split())
k=int(input())
unique=[]
freq={}
res=[]

for i in a:
  if i not in unique:
    unique.append(i)
    freq[i]=1

  else:
    freq[i]+=1
  if freq[i]==k+1:
    res.append(i)
print(res)

#check if List cotain elements in a range
a=map(int,input().split())
l,u=map(int,input().split())
c=True
for i in a:
  if i>u or i<l:
    c=False
  else:
    continue
print(c)

# if a list has three consecutive common numbers
a=map(int,input().split())
a=list(a)
for i in range(len(a) - 2):
    if a[i] == a[i + 1] == a[i + 2]:
        print("Found")
        break
else:
    print("Not Found")

#find the Strongest Neighbour
n = [1, 2, 3, 4, 5]
res = []

for i in range(len(n) - 1):
    res.append(max(n[i], n[i + 1]))
print(res)

#remove all instances of a elemenet in a list
a=map(int,input().split())
a=list(a)
k=int(input())
for i in a:
  if i==k:
    a.remove(i)
print(a)

#get the last n elements form a list
a=map(int,input().split())
a=list(a)
a.reverse()
n=int(input())
for i in range(n):
  print(a[i])

"""#Numpy Array Exercises"""

#Create a 2d array with 1 on the border and 0 inside

import numpy as np
x = np.ones((5, 5))
print(x)
print()
x[1:-1, 1:-1] = 0
print(x)

#create a chess board with 1s and 0s

x = np.zeros((8, 8), dtype=int)
x[1::2, ::2] = 1
x[::2, 1::2] = 1
print(x)

#covert fahrenheit to celisus

fvalues = [0, 12, 45.21, 34, 99.91, 32]
F = np.array(fvalues)
print(np.round((5 * F / 9 - 5 * 32 / 9), 2))

#Change the dimension of an array

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
x.shape = (3, 3)
print(x)

#compute block sums of size k

arra1 = np.ones((25, 25))
k=int(input())

print("Original array:")
print(arra1)

result = arra1.reshape(25//k, k, 25//k, k).sum(axis=(1, 3))

print(result)

#Set zero to lower triangles along the last two axes of a three-dimensional of a given array


a= np.ones((1, 8, 8))
print(a)
result = np.triu(a, k=1)
print(result)

"""# OOPS CONCEPTS- Exercises"""

# class and objects
class Student:
    def __init__(self,name, grade):
        self.name = name
        self.grade = grade

    def display_info(self):  # Method
        print(f"{self.name} {self.grade}")


st1=Student("Hem",9)
st2=Student("Lak",10)
st1.display_info()
st2.display_info()

#create a library management system
class book:
  def __init__(self,name,author,copies):
    self.name=name
    self.author=author
    self.copies=copies
  def __str__(self):
        return f"{self.name} by {self.author} -{self.copies}"
class library:
  def __init__(self):
    self.books=[]
  def add_book(self, book):
        self.books.append(book)

  def display_books(self):
        for book in self.books:
            print(book)

  def borrow_book(self, name):
    for book in self.books:
      if book.name == name and book.copies > 0:
        book.copies -= 1
        print(f"You borrowed '{name}'.")
        return
    print(f"'{name}' is not available.")

def main():
  lib=library()
  lib.add_book(book("1984","George Orwell",5))
  lib.add_book(book("Metamorphosis","Kafka",1))
  lib.add_book(book("War and Peace","Leo Tolstoy",1))
  lib.display_books()
  lib.borrow_book("1984")
  lib.borrow_book("War and Peace")
  lib.borrow_book("War and Peace")



if __name__=="__main__":
  main()

#encapsulation with a banking example

class bank_account:
  def __init__(self,name,balance):
    self.__name=name
    self.__balance=balance
  def deposit(self,amount):
    if amount<= 2000000:
       self.__balance+=amount
       print(f"Deposited: {amount} rupees")
    else:
      print(f"Rupees {amount} is more than the deposit limit of 20,00,000 rupees ")
  def withdraw(self,amount):
    if amount<= 2000000 and  self.__balance-amount>=5000:
       self.__balance-=amount
       print(f"Withdrawed ${amount}")
    elif amount>=2000000:
      print(f"{amount} is more than the withdrawal limit of 20,00,000 rupees ")
    else:
      print(f"You need to maintain a mimimum of 5000 rupees")
  def get_balance(self):
        return self.__balance

def main():
  acc1=bank_account("Hem",5000)
  acc1.deposit(100000)
  acc1.withdraw(101000)
  print(f"{acc1.get_balance()} rupees")


if __name__=="__main__":
  main()

#inheritance employee-manager
class Employee:
  def __init__(self,name,salary):
    self.name=name
    self.salary=salary
  def display_details(self):
    print(f"Employee: {self.name}, Salary: {self.salary}")

class Manager(Employee):
  def __init__(self,name,salary,department):
    super().__init__(name, salary)
    self.department=department
  def display_details(self):
     super().display_details()
     print(f"{self.department}")


def main():
  emp1=Employee("Hem",100000)
  emp2=Employee("Lak",50000)
  man1=Manager("Hemanth",150000,"Finance")
  emp1.display_details()
  man1.display_details()


if __name__=="__main__":
  main()

#Method Overiding (Polymorphism)
class animal:
  def speak(self):
    return "Sound!"
class dog(animal):
    def speak(self):
        return "Bark!"
class cat(animal):
    def speak(self):
        return "Meow!"

animals = [animal(),dog(), cat()]
for animal in animals:
    print(animal.speak())

# Method Overloading (Polymorphism)
import math
class calc:
    def add(self, *args):
        return sum(args)
    def mult(self,*args):
       return math.prod(args)

m = calc()
print(m.add(2, 3))
print(m.add(2, 3, 4))
print(m.add(1, 2, 3, 4, 5))
print(m.mult(2, 3))
print(m.mult(2, 3, 4))
print(m.mult(1, 2, 3, 4, 5))

# Multiple Inheritance - Banking System

class BankAccount:
    def __init__(self, name, acc_no, balance):
        self.__name = name
        self.__acc_no = acc_no
        self.__balance = balance

    def deposit(self, amount):
        if amount <= 2000000:
            self.__balance += amount
            print(f"Deposited: {amount} rupees")
        else:
            print(f"Rupees {amount} is more than the deposit limit of 20,00,000 rupees.")

    def withdraw(self, amount):
        if amount > 2000000:
            print(f"{amount} is more than the withdrawal limit of 20,00,000 rupees.")
        elif self.__balance - amount >= 5000:
            self.__balance -= amount
            print(f"Withdrawn: {amount} rupees")
        else:
            print("You need to maintain a minimum of 5000 rupees.")

    def get_balance(self):
        return self.__balance

    def get_account_details(self):
        return f"Account Holder: {self.__name}, Account No: {self.__acc_no}, Balance: {self.__balance} rupees"


class CreditAccount:
    def __init__(self, credit_limit):
        self.__credit_limit = credit_limit
        self.__credit_used = 0

    def use_credit(self, amount):
        if amount <= self.__credit_limit - self.__credit_used:
            self.__credit_used += amount
            print(f"Credit used: {amount} rupees")
        else:
            print("Credit limit exceeded!")

    def pay_credit(self, amount):
        if amount <= self.__credit_used:
            self.__credit_used -= amount
            print(f"Credit payment of {amount} rupees successful.")
        else:
            print("Invalid credit payment amount.")

    def get_credit_details(self):
        return f"Credit Limit: {self.__credit_limit} rupees, Credit Used: {self.__credit_used} rupees"


class Customer(BankAccount, CreditAccount):  # Multiple Inheritance
    def __init__(self, name, acc_no, balance, credit_limit):
        BankAccount.__init__(self, name, acc_no, balance)
        CreditAccount.__init__(self, credit_limit)

    def show_customer_details(self):
        print(self.get_account_details())
        print(self.get_credit_details())


def main():
    cust1 = Customer("Hem", "123456789", 50000, 100000)

    print("\nInitial Details:")
    cust1.show_customer_details()

    cust1.deposit(15000)
    cust1.withdraw(10000)
    cust1.use_credit(20000)
    cust1.pay_credit(5000)

    cust1.show_customer_details()


if __name__ == "__main__":
    main()

#Super() function

class CurrentAccount(BankAccount):
    def __init__(self, name, acc_no, balance, overdraft_limit):
        super().__init__(name, acc_no, balance)
        self.overdraft_limit = overdraft_limit

    def get_details(self):
        return super().get_account_details() + f", Overdraft Limit: {self.overdraft_limit} rupees"

c1 = CurrentAccount("Hem", "123456789", 30000, 10000)
print(c1.get_details())

#abstract method

from abc import ABC, abstractmethod

class Order(ABC):
    def __init__(self, items):
        self.items = items

    @abstractmethod
    def calculate_total(self):
        pass

class DineIn(Order):
    def calculate_total(self):
        return sum(self.items.values()) *1.2

class Takeout(Order):
    def calculate_total(self):
        return sum(self.items.values())

class Online(Order):
    def calculate_total(self):
        return sum(self.items.values()) *1.5

orders = [
    DineIn({"Burger":250, "Fries": 95}),
    Takeout({"Pasta": 490, "Wine": 300}),
    Online({"Salad": 315, "Garlic Bread": 60})
]

for order in orders:
    print(f"{order.__class__.__name__}: Total - {order.calculate_total()}")

# Class and Static Methods
class BankAccount:
    interest_rate = 7.5

    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    @staticmethod
    def calculate_interest(balance, years):
        n = 2
        return balance * ((1 + (BankAccount.interest_rate / (n * 100))) ** (n * years))

    @classmethod
    def update_interest_rate(cls, new_rate):
        cls.interest_rate = new_rate

acc1 = BankAccount("Hemanth", 12000)

print(f"Interest for 3 years (compounded semi-annually): {BankAccount.calculate_interest(acc1.balance, 3):.2f}")

BankAccount.update_interest_rate(8.0)
print(f"New interest rate: {BankAccount.interest_rate}%")

print(f"Interest for 3 years (compounded semi-annually): {BankAccount.calculate_interest(acc1.balance, 3):.2f}")

#property deorators
class Product:
    def __init__(self, name, price):
        self.name = name
        self._price = price
        self._discount = 0

    @property
    def price(self):
        return self._price - (self._price * self._discount / 100)

    @price.setter
    def price(self, new_price):
        if new_price > 0:
            self._price = new_price
        else:
            print("Price must be positive!")

    @property
    def discount(self):
        return self._discount

    @discount.setter
    def discount(self, percentage):
        if 0 <= percentage <= 50:
            self._discount = percentage
        else:
            print("Invalid discount percentage!")


p1 = Product("Smartphone", 50000)
print(f"Original Price: {p1.price}")

p1.discount = 20
print(f"Discounted Price: {p1.price}")
p1.discount = 60